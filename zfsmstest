#!/bin/bash

typeset -r ZFSMS="${0%%/*}/zfsms"
typeset -r TMPZPOOL='ztest'
typeset -r INITKEY='initzkey'
typeset -r TMPDS="$TMPZPOOL/test"
typeset TMPDIR
typeset USERKEY
typeset USERKEY2

function main() {
	run_test "test_convert_default"
	run_test "test_convert_slot"
	run_test "test_loadkey_default_nop"
	run_test "test_loadkey_default"
	run_test "test_listslots_default"
	run_test "test_addkey"
	run_test "test_removeslot"
	run_test "test_loadkey_explicit_slot2"
	run_test "test_loadkey_implicit_slot2"
	run_test "test_fail_remove_last_slot"
}

############
# Wrappers #
############

function run_test() {
	local -r red='\033[33;31m'
	local -r green='\033[33;32m'
	local -r reset='\e[0m'
	setup
	if "$1"; then
		printf "${green}passed${reset}: %s\n" "$1"
	else
		printf "${red}failed${reset}: %s (exit code: %d)\n" "$1" $?
	fi
	teardown
}

function setup() {
	TMPDIR="$(mktemp --directory --tmpdir zfsms.XXXXXXXX)"
	truncate "$TMPDIR"/test.zpool --size 1G
	sudo zpool create \
		-o altroot="$TMPDIR" \
		-o cachefile="$TMPDIR/test.zcache" \
		"$TMPZPOOL" \
		"$TMPDIR/test.zpool"
	sudo zfs create \
		-o encryption=on \
		-o keyformat=passphrase \
		$TMPDS \
		<<< "$INITKEY"
}

function teardown() {
	sudo zpool destroy "$TMPZPOOL"
	rm -rf "$TMPDIR"
}

#########
# Tests #
#########

function test_convert_default() {
	typeset wrapped_key
	typeset iters
	USERKEY='asdfasdf'

	sudo "$ZFSMS" convert -p $USERKEY "$TMPDS"
	wrapped_key="$(zfs get -Ho value wrappedkey:default "$TMPDS")"
	iters="$(zfs get -Ho value pbkdf2iters:default "$TMPDS")"

	[[ "$wrapped_key" != "-" ]] && [[ "$iters" != "-" ]]
}

function test_convert_slot() {
	typeset wrapped_key
	typeset iters
	typeset -r slot='slot1'

	sudo "$ZFSMS" convert -s "$slot" -p asdfasdf "$TMPDS"
	wrapped_key="$(zfs get -Ho value wrappedkey:"$slot"	"$TMPDS")"
	iters="$(zfs get -Ho value pbkdf2iters:"$slot" "$TMPDS")"

	[[ "$wrapped_key" != "-" ]] && [[ "$iters" != "-" ]]
}

function test_loadkey_default_nop() {
	test_convert_default || return 128
	sudo "$ZFSMS" load-key -n -p "$USERKEY" "$TMPDS" > /dev/null 2>&1
}

function test_loadkey_default() {
	test_convert_default || return 128
	sudo zfs umount $TMPZPOOL || return 129
	sudo zfs unload-key $TMPDS || return 130
	sudo "$ZFSMS" load-key -p "$USERKEY" "$TMPDS"
}

function test_loadkey_explicit_slot2() {
	test_addkey || return 128
	sudo "$ZFSMS" load-key -n -s slot2 -p "$USERKEY2" "$TMPDS" > /dev/null
}

function test_loadkey_implicit_slot2() {
	test_addkey || return 128
	sudo "$ZFSMS" load-key -n -p "$USERKEY2" "$TMPDS" > /dev/null
}

function test_listslots_default() {
	test_convert_default || return 128
	[[ "$($ZFSMS list-slots ztest/test)" == "default" ]]
}

function test_addkey() {
	local expected
	local actual
	USERKEY2='zxcvfdsa'

	test_convert_default || return 128
	printf '%s\n%s\n%s\n' "$USERKEY" "$USERKEY2" "$USERKEY2" \
		| sudo "$ZFSMS" add-key \
			-s "slot2" \
			-u "default" \
			ztest/test \
		> /dev/null \
		|| return 129
	expected="$(printf 'default\nslot2')"
	actual="$("$ZFSMS" list-slots $TMPDS | sort)" || return 130
	[[ "$expected" == "$actual" ]]
}

function test_removeslot() {
	local expected
	local actual

	test_addkey || return 128
	sudo "$ZFSMS" remove-slot -s slot2 $TMPDS || return 129

	expected='default'
	actual="$("$ZFSMS" list-slots $TMPDS)"
	[[ "$expected" == "$actual" ]] || return 130

	expected='-'
	actual="$(zfs get -Ho value "wrappedkey:slot2" "$TMPDS")"
	[[ "$expected" == "$actual" ]] || return 1

	actual="$(zfs get -Ho value "pbkdf2iters:slot2" "$TMPDS")"
	[[ "$expected" == "$actual" ]] || return 2
}

function test_fail_remove_last_slot() {
	local expected
	local actual

	test_convert_default || return 128
	if sudo "$ZFSMS" remove-slot -s default "$TMPDS" > /dev/null 2>&1; then
		return 1
	fi

	if [[ "$(zfs get -Ho value "wrappedkey:default")" == '-' ]]; then
		return 2
	fi

	if [[ "$(zfs get -Ho value "pbkdf2iters:default")" == '-' ]]; then
		return 3
	fi
}

main "$@"

# vim: noexpandtab sts=8 sw=8 colorcolumn=81 textwidth=80
